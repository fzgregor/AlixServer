# !/bin/sh
# this script is take from
# http://hartvig.de/2009/howto-automatically-spin-down-external-usb-hard-drives-in-ubuntu/
# and adapted to 
# - write state to /tmp
# - support different harddrives at the same time
# - arguemtn check
# - only save one state file
# - dont use md5, just compare content
# - dont try opening not existing file
# - throw all sdparm output to /dev/null
# form the comments below the article
# - check for root
# - also support uuids to identify sdX

print_help() {
	echo "Usage: idle-spindown [-hln] -d DEVICE | -u UUID" 1>&2
	echo "Spins down a idle drive." 1>&2
	echo "" 1>&2
	echo "	-d DEVICE	give a device node e.g. /dev/sdb" 1>&2
	echo "	-u UUID		give a partition UUID" 1>&2
	echo "  -l              log shutdown events and errors to syslog" 1>&2
	echo "  -n              don't show results" 1>&2
	echo "  -h              print this help text" 1>&2
	echo "" 1>&2
	echo "Example usage:" 1>&2
	echo "idle-spindown sdb # device path part" 1>&2
	echo "idle-spindown 44ef7a58-25a7 # uuid part" 1>&2
}

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
print="1"
log="0"
device=""
uuid=""

while getopts "nhld:u:" opt; do
    case "$opt" in
    \?) exit 1
	;;
    h)
        print_help
        exit 0
        ;;
    l)  log="1"
        ;;
    n)  print="0"
        ;;
    u)  uuid=$OPTARG
        ;;
    d)  device=$OPTARG
	;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

log(){
	/usr/bin/logger -t idle-spindown "$1"
}

notice(){
	if [ $print -eq "1" ]; then
		echo $1
	fi
}

log_notice(){
	if [ $print -eq "1" ]; then
		echo $1
	fi
	if [ $log -eq "1" ]; then
		log "$1"
	fi
}

# check permissions (root)
if [ "$(id -u)" != "0" ]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

# check options
if [ "$device" != "" ] && [ "$uuid" != "" ]; then
	echo "You have to choose between giving a device or a partition uuid!" 1>&2
	exit 1
fi

# turn uuid into device
if [ "$uuid" != "" ]; then
	device=$(readlink -f /dev/disk/by-uuid/$uuid | cut -b 1-8)
        if [ ! -b $device ]; then
		echo "There is no partition with UUID $uuid!" 1>&2
		exit 1
	fi
fi

# check device
if [ ! -e $device  ]; then
	echo "No device found at $device" 1>&2
	exit 1
fi

device=$(echo "$device" | cut -b 6-8)

# Get new state from diskstats
NEWstate=$(cat -A /proc/diskstats | grep -m 1 "$device")

# if no changes, power down and previous state
test -e /tmp/idle-spindown-$device-state.txt
if [ $? -eq 0 ] && [ "$NEWstate" = "$(cat /tmp/idle-spindown-$device-state.txt)" ]; then
        /usr/bin/sg_start --stop --readonly /dev/$device > /dev/null 2>&1
	notice "Device was inactivy since the last invoke"
	log_notice "Stopping device $device"
        if [ $? -ne 0 ]; then
		log_notice "failed!"
	fi
else
	notice "No previous device state or device was accessed in the meantime"
	notice "No spindown command send."
fi

# Write current state to file
echo "$NEWstate" > /tmp/idle-spindown-$device-state.txt
